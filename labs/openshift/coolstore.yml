apiVersion: v1
kind: Template
metadata:
  name: coolstore-debugging-template
objects:
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: catalog
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: catalog-s2i
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output:
      to:
        kind: ImageStreamTag
        name: catalog:latest
    postCommit: {}
    resources:
      limits:
        cpu: 500m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.4
          namespace: openshift
        env:
        - name: MAVEN_MIRROR_URL
          value: 'http://nexus.opentlc-shared.svc:8081/repository/maven-all-public'
      type: Source
    triggers: []
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: gateway
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: gateway-s2i
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output:
      to:
        kind: ImageStreamTag
        name: gateway:latest
    postCommit: {}
    resources:
      limits:
        cpu: 500m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.4
          namespace: openshift
        env:
        - name: MAVEN_MIRROR_URL
          value: 'http://nexus.opentlc-shared.svc:8081/repository/maven-all-public'
      type: Source
    triggers: []
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: inventory
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: inventory-s2i
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output:
      to:
        kind: ImageStreamTag
        name: inventory:latest
    postCommit: {}
    resources:
      limits:
        cpu: 500m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.4
          namespace: openshift
        env:
        - name: MAVEN_MIRROR_URL
          value: 'http://nexus.opentlc-shared.svc:8081/repository/maven-all-public'
      type: Source
    triggers: []
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: web
    name: web
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: web:latest
    postCommit: {}
    resources:
      limits:
        cpu: 500m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:8
          namespace: openshift
      type: Source
    triggers: []
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      fabric8.io/iconUrl: img/icons/spring-boot.svg
      fabric8.io/metrics-path: dashboard/file/kubernetes-pods.json/?var-project=catalog&var-version=1.0
    generation: 3
    labels:
      app: catalog
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: catalog
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      app: catalog
      group: com.redhat.cloudnative
      provider: fabric8
    strategy:
      activeDeadlineSeconds: 21600
      resources:
        limits:
          cpu: 500m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 3600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          fabric8.io/iconUrl: img/icons/spring-boot.svg
          fabric8.io/metrics-path: dashboard/file/kubernetes-pods.json/?var-project=catalog&var-version=1.0
          sidecar.istio.io/inject: "true"
        labels:
          app: catalog
          group: com.redhat.cloudnative
          provider: fabric8
          version: v1.0
      spec:
        containers:
        - args:
          - -c
          - until $(curl -o /dev/null -s -I -f http://127.0.0.1:15000); do echo \"Waiting for Istio Sidecar...\"; sleep 1; done; sleep 10; /usr/local/s2i/run
          command:
          - /bin/bash
          env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: catalog:latest
          imagePullPolicy: IfNotPresent
          name: spring-boot
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
                - curl
                - '-f'
                - 'http://127.0.0.1:8080/health'
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - curl
                - '-f'
                - 'http://127.0.0.1:8080/health'
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - spring-boot
        from:
          kind: ImageStreamTag
          name: catalog:latest
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      template.alpha.openshift.io/wait-for-ready: "true"
    generation: 2
    labels:
      app: catalog
      version: v1.0
    name: catalog-postgresql
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: catalog-postgresql
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources:
        limits:
          cpu: 500m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: catalog
          name: catalog-postgresql
          version: database-v1.0
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: catalog-postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: catalog-postgresql
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: catalog-postgresql
          image: postgresql:9.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: catalog-postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: catalog-postgresql-data
          emptyDir: {}
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.6
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      fabric8.io/iconUrl: img/icons/vertx.svg
      fabric8.io/metrics-path: dashboard/file/kubernetes-pods.json/?var-project=gateway&var-version=1.0
    generation: 33
    labels:
      app: gateway
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: gateway
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      app: gateway
      group: com.redhat.cloudnative
      provider: fabric8
    strategy:
      activeDeadlineSeconds: 21600
      resources: 
        limits:
          cpu: 500m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 3600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          fabric8.io/iconUrl: img/icons/vertx.svg
          fabric8.io/metrics-path: dashboard/file/kubernetes-pods.json/?var-project=gateway&var-version=1.0
          sidecar.istio.io/inject: "true"
        labels:
          app: gateway
          group: com.redhat.cloudnative
          provider: fabric8
          version: v1.0
      spec:
        containers:
        - args:
          - -c
          - until $(curl -o /dev/null -s -I -f http://127.0.0.1:15000); do echo \"Waiting for Istio Sidecar...\"; sleep 1; done; sleep 10; /usr/local/s2i/run
          command:
          - /bin/bash
          env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gateway:latest
          imagePullPolicy: IfNotPresent
          name: vertx
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
                - curl
                - '-f'
                - 'http://127.0.0.1:8080/health'
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - curl
                - '-f'
                - 'http://127.0.0.1:8080/health'
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - vertx
        from:
          kind: ImageStreamTag
          name: gateway:latest
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      fabric8.io/iconUrl: img/icons/wildfly.svg
      fabric8.io/metrics-path: dashboard/file/kubernetes-pods.json/?var-project=inventory&var-version=1.0
    generation: 5
    labels:
      app: inventory
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: inventory
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      app: inventory
      group: com.redhat.cloudnative
      provider: fabric8
    strategy:
      activeDeadlineSeconds: 21600
      resources:
        limits:
          cpu: 500m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 3600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          fabric8.io/iconUrl: img/icons/wildfly.svg
          fabric8.io/metrics-path: dashboard/file/kubernetes-pods.json/?var-project=inventory&var-version=1.0
          sidecar.istio.io/inject: "true"
        labels:
          app: inventory
          group: com.redhat.cloudnative
          provider: fabric8
          version: v1.0
      spec:
        containers:
        - args:
          - -c
          - until $(curl -o /dev/null -s -I -f http://127.0.0.1:15000); do echo \"Waiting for Istio Sidecar...\"; sleep 1; done; sleep 10; /usr/local/s2i/run
          command:
          - /bin/bash
          env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GC_MAX_METASPACE_SIZE
            value: "300"
          - name: JAVA_ARGS
            value: -s /app/config/project-defaults.yml
          image: inventory:latest
          imagePullPolicy: IfNotPresent
          name: thorntail-v2
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config
            name: volume-md4mb
          livenessProbe:
            exec:
              command:
                - curl
                - '-f'
                - 'http://127.0.0.1:8080/node'
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - curl
                - '-f'
                - 'http://127.0.0.1:8080/node'
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: inventory
          name: volume-md4mb
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - thorntail-v2
        from:
          kind: ImageStreamTag
          name: inventory:latest
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      template.alpha.openshift.io/wait-for-ready: "true"
    generation: 2
    labels:
      app: inventory
      version: v1.0
    name: inventory-postgresql
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: inventory-postgresql
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources:
        limits:
          cpu: 500m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: inventory
          name: inventory-postgresql
          version: database-v1.0
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: inventory-postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: inventory-postgresql
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: inventory-postgresql
          image: postgresql:9.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: inventory-postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: inventory-postgresql-data
          emptyDir: {}
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.6
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    generation: 3
    labels:
      app: web
      version: v1.0
    name: web
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: web
      deploymentconfig: web
    strategy:
      activeDeadlineSeconds: 21600
      resources:
        limits:
          cpu: 500m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: web
          deploymentconfig: web
          version: v1.0
      spec:
        containers:
        - env:
          - name: COOLSTORE_GW_ENDPOINT
            value: istio-ingressgateway-istio-system
          - name: COOLSTORE_USER_PREFIX
            value: /${COOLSTORE_PROJECT}
          image: web:latest
          imagePullPolicy: Always
          name: web
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - web
        from:
          kind: ImageStreamTag
          name: web:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      fabric8.io/iconUrl: img/icons/spring-boot.svg
      prometheus.io/port: "9779"
      prometheus.io/scrape: "true"
    labels:
      app: catalog
      expose: "true"
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: catalog
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: catalog
      group: com.redhat.cloudnative
      provider: fabric8
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: catalog
      version: v1.0
    name: catalog-postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: catalog-postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      fabric8.io/iconUrl: img/icons/vertx.svg
      prometheus.io/port: "9779"
      prometheus.io/scrape: "true"
    labels:
      app: gateway
      expose: "true"
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: gateway
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: gateway
      group: com.redhat.cloudnative
      provider: fabric8
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      fabric8.io/iconUrl: img/icons/wildfly.svg
      prometheus.io/port: "9779"
      prometheus.io/scrape: "true"
    labels:
      app: inventory
      expose: "true"
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: inventory
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: inventory
      group: com.redhat.cloudnative
      provider: fabric8
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: inventory
      version: v1.0
    name: inventory-postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: inventory-postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: web
      version: v1.0
    name: web
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: web
      deploymentconfig: web
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    application.properties: |
      spring.datasource.url=jdbc:postgresql://catalog-postgresql:5432/catalog
      spring.datasource.username=catalog
      spring.datasource.password=catalog
      spring.datasource.driver-class-name=org.postgresql.Driver
      spring.jpa.hibernate.ddl-auto=create
  kind: ConfigMap
  metadata:
    name: catalog
- apiVersion: v1
  data:
    project-defaults.yml: |
      swarm:
        datasources:
          data-sources:
            InventoryDS:
              driver-name: postgresql
              connection-url: jdbc:postgresql://inventory-postgresql:5432/inventory
              user-name: inventory
              password: inventory
              valid-connection-checker-class-name: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker
              validate-on-match: true
              background-validation: false
              exception-sorter-class-name: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter
  kind: ConfigMap
  metadata:
    name: inventory
- apiVersion: v1
  data:
    database-name: Y2F0YWxvZw==
    database-password: Y2F0YWxvZw==
    database-user: Y2F0YWxvZw==
  kind: Secret
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    labels:
      app: catalog
      version: v1.0
    name: catalog-postgresql
  type: Opaque
- apiVersion: v1
  data:
    database-name: aW52ZW50b3J5
    database-password: aW52ZW50b3J5
    database-user: aW52ZW50b3J5
  kind: Secret
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    labels:
      app: inventory
      version: v1.0
    name: inventory-postgresql
  type: Opaque
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: catalog
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: catalog
  spec:
    lookupPolicy:
      local: true
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: gateway
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: gateway
  spec:
    lookupPolicy:
      local: true
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: inventory
      group: com.redhat.cloudnative
      provider: fabric8
      version: v1.0
    name: inventory
  spec:
    lookupPolicy:
      local: true
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: web
      version: v1.0
    name: web
  spec:
    lookupPolicy:
      local: false
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: catalog
      template: postgresql-persistent-template
      version: v1.0
    name: catalog-postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: inventory
      template: postgresql-persistent-template
      version: v1.0
    name: inventory-postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: networking.istio.io/v1alpha3
  kind: Gateway
  metadata:
    name: istio-gateway
  spec:
    selector:
      istio: ingressgateway # use Istio default gateway implementation
    servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
      - "*"
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: gateway
  spec:
    hosts:
    - "*"
    gateways:
    - istio-gateway
    http:
    - match:
      - uri:
          prefix: /${COOLSTORE_PROJECT}/api
      rewrite:
        uri: "/api"
      route:
      - destination:
          port:
            number: 8080
          host: gateway
- apiVersion: networking.istio.io/v1alpha3
  kind: Gateway
  metadata:
    name: web-gateway
  spec:
    selector:
      istio: ingressgateway # use istio default controller
    servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
      - ${COOLSTORE_PROJECT}.${APPS_HOSTNAME_SUFFIX}
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: web
  spec:
    hosts:
    - "*"
    gateways:
    - web-gateway
    http:
    - route:
      - destination:
          host: web
          port:
            number: 8080
parameters:
- description: Coolstore Project Name
  name: COOLSTORE_PROJECT
  value: coolstore
  required: true
- description: Application Hostname Suffix URL
  name: APPS_HOSTNAME_SUFFIX
  required: true
